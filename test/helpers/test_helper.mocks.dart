// Mocks generated by Mockito 5.4.4 from annotations
// in hometasks/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;

import 'package:cloud_firestore/cloud_firestore.dart' as _i3;
import 'package:hometasks/src/core/response/response.dart' as _i5;
import 'package:hometasks/src/core/results/result.dart' as _i2;
import 'package:hometasks/src/features/tasks/data/data_sources/firesbase_task_data_source.dart'
    as _i17;
import 'package:hometasks/src/features/tasks/data/models/task_model.dart'
    as _i16;
import 'package:hometasks/src/features/tasks/data/repositories/task_remote_data_source.dart'
    as _i15;
import 'package:hometasks/src/features/tasks/domain/entities/get_task_params_model.dart'
    as _i13;
import 'package:hometasks/src/features/tasks/domain/entities/task_entity.dart'
    as _i12;
import 'package:hometasks/src/features/tasks/domain/entities/update_task_params.dart'
    as _i14;
import 'package:hometasks/src/features/tasks/domain/repositories/firebase_task_repository_domain.dart'
    as _i4;
import 'package:hometasks/src/features/tasks/domain/usecases/add_task_use_case.dart'
    as _i7;
import 'package:hometasks/src/features/tasks/domain/usecases/delete_task_use_case.dart'
    as _i9;
import 'package:hometasks/src/features/tasks/domain/usecases/get_task_by_id_use_case.dart'
    as _i10;
import 'package:hometasks/src/features/tasks/domain/usecases/get_tasks_use_case.dart'
    as _i6;
import 'package:hometasks/src/features/tasks/domain/usecases/tasks_use_cases.dart'
    as _i18;
import 'package:hometasks/src/features/tasks/domain/usecases/update_task_use_case.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseFirestore_1 extends _i1.SmartFake
    implements _i3.FirebaseFirestore {
  _FakeFirebaseFirestore_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDomainFirebaseTaskRepository_2 extends _i1.SmartFake
    implements _i4.DomainFirebaseTaskRepository {
  _FakeDomainFirebaseTaskRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_3<T> extends _i1.SmartFake implements _i5.Response<T> {
  _FakeResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTasksUseCase_4 extends _i1.SmartFake
    implements _i6.GetTasksUseCase {
  _FakeGetTasksUseCase_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAddTaskUseCase_5 extends _i1.SmartFake
    implements _i7.AddTaskUseCase {
  _FakeAddTaskUseCase_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUpdateTaskUseCase_6 extends _i1.SmartFake
    implements _i8.UpdateTaskUseCase {
  _FakeUpdateTaskUseCase_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteTaskUseCase_7 extends _i1.SmartFake
    implements _i9.DeleteTaskUseCase {
  _FakeDeleteTaskUseCase_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetTaskByIdUseCase_8 extends _i1.SmartFake
    implements _i10.GetTaskByIdUseCase {
  _FakeGetTaskByIdUseCase_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DomainFirebaseTaskRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDomainFirebaseTaskRepository extends _i1.Mock
    implements _i4.DomainFirebaseTaskRepository {
  MockDomainFirebaseTaskRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Stream<List<_i12.Task>> getTasksStream(_i13.GetTaskParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksStream,
          [params],
        ),
        returnValue: _i11.Stream<List<_i12.Task>>.empty(),
      ) as _i11.Stream<List<_i12.Task>>);

  @override
  _i11.Future<_i2.Result<dynamic>> addTask(_i12.Task? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue:
            _i11.Future<_i2.Result<dynamic>>.value(_FakeResult_0<dynamic>(
          this,
          Invocation.method(
            #addTask,
            [task],
          ),
        )),
      ) as _i11.Future<_i2.Result<dynamic>>);

  @override
  _i11.Future<_i2.Result<dynamic>> updateTask(
          _i14.UpdateTaskParams? updateParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [updateParams],
        ),
        returnValue:
            _i11.Future<_i2.Result<dynamic>>.value(_FakeResult_0<dynamic>(
          this,
          Invocation.method(
            #updateTask,
            [updateParams],
          ),
        )),
      ) as _i11.Future<_i2.Result<dynamic>>);

  @override
  _i11.Future<_i2.Result<dynamic>> deleteTask(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue:
            _i11.Future<_i2.Result<dynamic>>.value(_FakeResult_0<dynamic>(
          this,
          Invocation.method(
            #deleteTask,
            [id],
          ),
        )),
      ) as _i11.Future<_i2.Result<dynamic>>);

  @override
  _i11.Future<_i2.Result<_i12.Task>> getTaskById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [id],
        ),
        returnValue:
            _i11.Future<_i2.Result<_i12.Task>>.value(_FakeResult_0<_i12.Task>(
          this,
          Invocation.method(
            #getTaskById,
            [id],
          ),
        )),
      ) as _i11.Future<_i2.Result<_i12.Task>>);
}

/// A class which mocks [TaskDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskDataSource extends _i1.Mock implements _i15.TaskDataSource {
  MockTaskDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Stream<List<_i16.TaskModel>> getTasksStreamAsync(
          _i13.GetTaskParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksStreamAsync,
          [params],
        ),
        returnValue: _i11.Stream<List<_i16.TaskModel>>.empty(),
      ) as _i11.Stream<List<_i16.TaskModel>>);

  @override
  _i11.Future<_i2.Result<dynamic>> addTask(_i16.TaskModel? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue:
            _i11.Future<_i2.Result<dynamic>>.value(_FakeResult_0<dynamic>(
          this,
          Invocation.method(
            #addTask,
            [task],
          ),
        )),
      ) as _i11.Future<_i2.Result<dynamic>>);

  @override
  _i11.Future<_i2.Result<dynamic>> updateTask(
    String? taskId,
    Map<String, dynamic>? updatedFields,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [
            taskId,
            updatedFields,
          ],
        ),
        returnValue:
            _i11.Future<_i2.Result<dynamic>>.value(_FakeResult_0<dynamic>(
          this,
          Invocation.method(
            #updateTask,
            [
              taskId,
              updatedFields,
            ],
          ),
        )),
      ) as _i11.Future<_i2.Result<dynamic>>);

  @override
  _i11.Future<_i2.Result<dynamic>> deleteTask(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue:
            _i11.Future<_i2.Result<dynamic>>.value(_FakeResult_0<dynamic>(
          this,
          Invocation.method(
            #deleteTask,
            [id],
          ),
        )),
      ) as _i11.Future<_i2.Result<dynamic>>);

  @override
  _i11.Future<_i2.Result<_i16.TaskModel>> getTaskById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [id],
        ),
        returnValue: _i11.Future<_i2.Result<_i16.TaskModel>>.value(
            _FakeResult_0<_i16.TaskModel>(
          this,
          Invocation.method(
            #getTaskById,
            [id],
          ),
        )),
      ) as _i11.Future<_i2.Result<_i16.TaskModel>>);
}

/// A class which mocks [FirebaseTaskDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseTaskDataSource extends _i1.Mock
    implements _i17.FirebaseTaskDataSource {
  MockFirebaseTaskDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_1(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i3.FirebaseFirestore);

  @override
  _i11.Stream<List<_i16.TaskModel>> getTasksStreamAsync(
          _i13.GetTaskParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksStreamAsync,
          [params],
        ),
        returnValue: _i11.Stream<List<_i16.TaskModel>>.empty(),
      ) as _i11.Stream<List<_i16.TaskModel>>);

  @override
  _i11.Future<_i2.Result<dynamic>> addTask(_i16.TaskModel? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValue:
            _i11.Future<_i2.Result<dynamic>>.value(_FakeResult_0<dynamic>(
          this,
          Invocation.method(
            #addTask,
            [task],
          ),
        )),
      ) as _i11.Future<_i2.Result<dynamic>>);

  @override
  _i11.Future<_i2.Result<dynamic>> deleteTask(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue:
            _i11.Future<_i2.Result<dynamic>>.value(_FakeResult_0<dynamic>(
          this,
          Invocation.method(
            #deleteTask,
            [id],
          ),
        )),
      ) as _i11.Future<_i2.Result<dynamic>>);

  @override
  _i11.Future<_i2.Result<dynamic>> updateTask(
    String? taskId,
    Map<String, dynamic>? updatedFields,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [
            taskId,
            updatedFields,
          ],
        ),
        returnValue:
            _i11.Future<_i2.Result<dynamic>>.value(_FakeResult_0<dynamic>(
          this,
          Invocation.method(
            #updateTask,
            [
              taskId,
              updatedFields,
            ],
          ),
        )),
      ) as _i11.Future<_i2.Result<dynamic>>);

  @override
  _i11.Future<_i2.Result<_i16.TaskModel>> getTaskById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTaskById,
          [id],
        ),
        returnValue: _i11.Future<_i2.Result<_i16.TaskModel>>.value(
            _FakeResult_0<_i16.TaskModel>(
          this,
          Invocation.method(
            #getTaskById,
            [id],
          ),
        )),
      ) as _i11.Future<_i2.Result<_i16.TaskModel>>);
}

/// A class which mocks [GetTasksUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTasksUseCase extends _i1.Mock implements _i6.GetTasksUseCase {
  MockGetTasksUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.DomainFirebaseTaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDomainFirebaseTaskRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.DomainFirebaseTaskRepository);

  @override
  _i11.Stream<List<_i12.Task>> handle(_i13.GetTaskParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #handle,
          [params],
        ),
        returnValue: _i11.Stream<List<_i12.Task>>.empty(),
      ) as _i11.Stream<List<_i12.Task>>);
}

/// A class which mocks [UpdateTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateTaskUseCase extends _i1.Mock implements _i8.UpdateTaskUseCase {
  MockUpdateTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.DomainFirebaseTaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDomainFirebaseTaskRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.DomainFirebaseTaskRepository);

  @override
  _i11.Future<_i5.Response<dynamic>> handle(
          _i14.UpdateTaskParams? updateParams) =>
      (super.noSuchMethod(
        Invocation.method(
          #handle,
          [updateParams],
        ),
        returnValue:
            _i11.Future<_i5.Response<dynamic>>.value(_FakeResponse_3<dynamic>(
          this,
          Invocation.method(
            #handle,
            [updateParams],
          ),
        )),
      ) as _i11.Future<_i5.Response<dynamic>>);
}

/// A class which mocks [DeleteTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteTaskUseCase extends _i1.Mock implements _i9.DeleteTaskUseCase {
  MockDeleteTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.DomainFirebaseTaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDomainFirebaseTaskRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.DomainFirebaseTaskRepository);

  @override
  _i11.Future<_i5.Response<dynamic>> handle(String? id) => (super.noSuchMethod(
        Invocation.method(
          #handle,
          [id],
        ),
        returnValue:
            _i11.Future<_i5.Response<dynamic>>.value(_FakeResponse_3<dynamic>(
          this,
          Invocation.method(
            #handle,
            [id],
          ),
        )),
      ) as _i11.Future<_i5.Response<dynamic>>);
}

/// A class which mocks [AddTaskUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddTaskUseCase extends _i1.Mock implements _i7.AddTaskUseCase {
  MockAddTaskUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.DomainFirebaseTaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDomainFirebaseTaskRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.DomainFirebaseTaskRepository);

  @override
  _i11.Future<_i5.Response<_i12.Task>> handle(_i12.Task? task) =>
      (super.noSuchMethod(
        Invocation.method(
          #handle,
          [task],
        ),
        returnValue: _i11.Future<_i5.Response<_i12.Task>>.value(
            _FakeResponse_3<_i12.Task>(
          this,
          Invocation.method(
            #handle,
            [task],
          ),
        )),
      ) as _i11.Future<_i5.Response<_i12.Task>>);
}

/// A class which mocks [GetTaskByIdUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTaskByIdUseCase extends _i1.Mock
    implements _i10.GetTaskByIdUseCase {
  MockGetTaskByIdUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.DomainFirebaseTaskRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeDomainFirebaseTaskRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.DomainFirebaseTaskRepository);

  @override
  _i11.Future<_i5.Response<_i12.Task>> handle(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #handle,
          [id],
        ),
        returnValue: _i11.Future<_i5.Response<_i12.Task>>.value(
            _FakeResponse_3<_i12.Task>(
          this,
          Invocation.method(
            #handle,
            [id],
          ),
        )),
      ) as _i11.Future<_i5.Response<_i12.Task>>);
}

/// A class which mocks [TaskUseCases].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskUseCases extends _i1.Mock implements _i18.TaskUseCases {
  MockTaskUseCases() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetTasksUseCase get getTasks => (super.noSuchMethod(
        Invocation.getter(#getTasks),
        returnValue: _FakeGetTasksUseCase_4(
          this,
          Invocation.getter(#getTasks),
        ),
      ) as _i6.GetTasksUseCase);

  @override
  _i7.AddTaskUseCase get addTask => (super.noSuchMethod(
        Invocation.getter(#addTask),
        returnValue: _FakeAddTaskUseCase_5(
          this,
          Invocation.getter(#addTask),
        ),
      ) as _i7.AddTaskUseCase);

  @override
  _i8.UpdateTaskUseCase get updateTask => (super.noSuchMethod(
        Invocation.getter(#updateTask),
        returnValue: _FakeUpdateTaskUseCase_6(
          this,
          Invocation.getter(#updateTask),
        ),
      ) as _i8.UpdateTaskUseCase);

  @override
  _i9.DeleteTaskUseCase get deleteTask => (super.noSuchMethod(
        Invocation.getter(#deleteTask),
        returnValue: _FakeDeleteTaskUseCase_7(
          this,
          Invocation.getter(#deleteTask),
        ),
      ) as _i9.DeleteTaskUseCase);

  @override
  _i10.GetTaskByIdUseCase get getTaskById => (super.noSuchMethod(
        Invocation.getter(#getTaskById),
        returnValue: _FakeGetTaskByIdUseCase_8(
          this,
          Invocation.getter(#getTaskById),
        ),
      ) as _i10.GetTaskByIdUseCase);
}
